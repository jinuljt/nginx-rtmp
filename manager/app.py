import json
import subprocess
from pathlib import Path
from typing import List

from flask import Flask, flash, redirect, render_template, request, url_for

DATA_PATH = Path("/var/lib/nginx-manager/push_sources.json")
CONF_PATH = Path("/etc/nginx/conf.d/rtmp_pushes.conf")


def _ensure_storage() -> None:
    DATA_PATH.parent.mkdir(parents=True, exist_ok=True)
    if not DATA_PATH.exists():
        DATA_PATH.write_text("[]", encoding="utf-8")
    CONF_PATH.parent.mkdir(parents=True, exist_ok=True)
    if not CONF_PATH.exists():
        CONF_PATH.write_text("# Generated by the RTMP manager\n", encoding="utf-8")


def load_sources() -> List[str]:
    _ensure_storage()
    try:
        return json.loads(DATA_PATH.read_text(encoding="utf-8"))
    except json.JSONDecodeError:
        return []


def persist_sources(sources: List[str]) -> None:
    previous_data = DATA_PATH.read_text(encoding="utf-8") if DATA_PATH.exists() else "[]"
    previous_conf = CONF_PATH.read_text(encoding="utf-8") if CONF_PATH.exists() else ""

    DATA_PATH.write_text(json.dumps(sources, indent=2, ensure_ascii=False), encoding="utf-8")
    lines = ["# Managed automatically; changes will be overwritten.\n"]
    for url in sources:
        lines.append(f"push {url};\n")
    CONF_PATH.write_text("".join(lines), encoding="utf-8")

    try:
        subprocess.run(["nginx", "-s", "reload"], check=True)
    except subprocess.CalledProcessError as exc:
        DATA_PATH.write_text(previous_data, encoding="utf-8")
        CONF_PATH.write_text(previous_conf, encoding="utf-8")
        raise RuntimeError("重新加载 Nginx 失败，请检查配置。") from exc


def normalise_url(url: str) -> str:
    trimmed = url.strip()
    return trimmed.rstrip("/")


app = Flask(__name__)
app.secret_key = "rtmp-manager"
app.config["JSON_SORT_KEYS"] = False


@app.route("/", methods=["GET"])
def index():
    sources = load_sources()
    return render_template("index.html", sources=sources)


@app.route("/add", methods=["POST"])
def add_source():
    raw_url = request.form.get("push_url", "")
    if not raw_url:
        flash("推送地址不能为空。", "error")
        return redirect(url_for("index"))

    url = normalise_url(raw_url)
    if not url.startswith(("rtmp://", "rtmps://")):
        flash("仅支持 rtmp:// 或 rtmps:// 开头的地址。", "error")
        return redirect(url_for("index"))

    sources = load_sources()
    if url in sources:
        flash("该推送源已存在。", "info")
        return redirect(url_for("index"))

    sources.append(url)
    try:
        persist_sources(sources)
    except RuntimeError as exc:
        flash(str(exc), "error")
        return redirect(url_for("index"))
    flash("新增推送源成功，Nginx 已重新加载。", "success")
    return redirect(url_for("index"))


@app.route("/delete", methods=["POST"])
def delete_source():
    url = request.form.get("push_url", "")
    sources = load_sources()
    if url not in sources:
        flash("未找到指定的推送源。", "error")
        return redirect(url_for("index"))

    sources = [item for item in sources if item != url]
    try:
        persist_sources(sources)
    except RuntimeError as exc:
        flash(str(exc), "error")
        return redirect(url_for("index"))
    flash("已删除推送源，Nginx 已重新加载。", "success")
    return redirect(url_for("index"))


@app.route("/api/sources", methods=["GET"])
def api_sources():
    return {"sources": load_sources()}


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
